// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                    String            @id @default(cuid())
  noms                  String
  prenoms               String
  email                 String            @unique
  contact               String?
  is_active             Boolean           @default(true)
  auto_login_token      String?
  is_first_login        Boolean           @default(true)
  mail_verified_at      DateTime?
  activation_token      String?
  activation_code       String?
  activation_expires_at DateTime?
  password              String
  facebook_link         String?
  twitter_link          String?
  instagram_link        String?
  linkedin_link         String?
  snapchat_link         String?
  short_description     String?
  full_description      String?
  user_title            String?
  photo_path            String?
  profile_id            String
  profile               profiles          @relation(fields: [profile_id], references: [id])
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  deleted_at            DateTime?
  created_by            String?
  updated_by            String?
  deleted_by            String?
  password_resets       password_resets[]
  articles              UserArticles[]
  magazines             magazines[]
}

model profiles {
  id          String    @id @default(cuid())
  libelle     String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?
  created_by  String?
  updated_by  String?
  deleted_by  String?
  users       users[]
}

model password_resets {
  id                  String    @id @default(cuid())
  code                String    @db.VarChar(6)
  token               String    @db.VarChar(32)
  confirmed_at        DateTime?
  expires_at          DateTime?
  user_id             String
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  deleted_at          DateTime?
  created_by          String?
  updated_by          String?
  deleted_by          String?
  password_changed_at DateTime?
  user                users     @relation(fields: [user_id], references: [id])
}

model categories {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String
  description String?    @db.Text
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?
  created_by  String?
  updated_by  String?
  deleted_by  String?
  articles    articles[]
}

model articles {
  id              String         @id @default(cuid())
  art_title       String         @unique
  art_sub_title   String?        @db.VarChar(255)
  art_description String?        @db.Text
  slug            String
  art_keywords    String?        @db.VarChar(255)
  category_id     String
  category        categories     @relation(fields: [category_id], references: [id])
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deleted_at      DateTime?
  created_by      String?
  updated_by      String?
  deleted_by      String?
  status          status?        @relation(fields: [status_id], references: [id])
  status_id       String?
  users           UserArticles[]
}

model status {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime?   @updatedAt
  deleted_at  DateTime?
  created_by  String?
  updated_by  String?
  deleted_by  String?
  articles    articles[]
  magazines   magazines[]
}

model medias {
  id         String     @id @default(cuid())
  media_path String
  media_type MediaTypes
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
  deleted_at DateTime?
  created_by String?
  updated_by String?
  deleted_by String?
}

enum MediaTypes {
  Image
  Fichier
}

model UserArticles {
  user_id    String
  article_id String
  users      users    @relation(fields: [user_id], references: [id])
  articles   articles @relation(fields: [article_id], references: [id])

  @@id([user_id, article_id])
}

model magazines {
  id              String    @id @default(cuid())
  mag_title       String    @unique
  mag_description String?   @db.Text
  slug            String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  created_by      String?
  updated_by      String?
  deleted_by      String?
  status          status?   @relation(fields: [status_id], references: [id])
  status_id       String?
  user_id         String
  user            users     @relation(fields: [user_id], references: [id])
}
